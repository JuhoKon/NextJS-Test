{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Firestore } from \"@google-cloud/firestore\";\nimport { LOCALIZATION } from \"../../lib/Constants\";\nimport SRedis from \"./RedisInstance\";\n\nclass SFirestore {\n  constructor() {\n    _defineProperty(this, \"firestore\", void 0);\n\n    _defineProperty(this, \"redisInstance\", void 0);\n\n    const firestore = new Firestore();\n    const RedisInstance = SRedis.getInstance();\n    this.firestore = firestore;\n    this.redisInstance = RedisInstance;\n  }\n\n  static getInstance() {\n    if (!SFirestore.instance) {\n      SFirestore.instance = new SFirestore();\n    }\n\n    return SFirestore.instance;\n  }\n\n  async getLocalizations() {\n    // TODO error handling\n    const valueFromCache = await this.redisInstance.getValue(LOCALIZATION);\n\n    if (valueFromCache) {\n      console.log(\"Serving from cache\");\n      return valueFromCache;\n    }\n\n    const snapshot = await this.firestore.collection(LOCALIZATION).get();\n    const data = snapshot.docs.map(doc => {\n      return _objectSpread({\n        localizationId: doc.id\n      }, doc.data());\n    });\n    this.redisInstance.setKey(LOCALIZATION, data);\n    return data;\n  } // setup listener for changes in documents by collections\n  // also can update redis-keys for them\n\n\n}\n\n_defineProperty(SFirestore, \"instance\", void 0);\n\nexport default SFirestore;","map":null,"metadata":{},"sourceType":"module"}